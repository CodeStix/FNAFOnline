<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stx.Net</name>
    </assembly>
    <members>
        <member name="P:Stx.Net.BaseClient`1.NetworkID">
            <summary>
            Your unique identifier on the network.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.Remote">
            <summary>
            The endpoint this client will get connected too.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.DataReceiver">
            <summary>
            The <see cref="T:Stx.Net.DataReceiver"/> of this client, add your data handling here.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.Scheduler">
            <summary>
            The task scheduler of this client. See <see cref="T:Stx.Utilities.ThreadSafeData"/> to invoke tasks safely.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.Connected">
            <summary>
            Are we connected to the server?
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.ClientAuthorisationToken">
            <summary>
            Your 'password' to authorize on the server with your client ID.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.ApplicationKey">
            <summary>
            The key of the application this client is running on.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.ApplicationName">
            <summary>
            The name of the application this client is running on.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.ApplicationVersion">
            <summary>
            The version of the application this client is running on.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.You">
            <summary>
            A read-only version of your identity on the server, downloaded when the connection is established.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.DisconnectReason">
            <summary>
            The reason you got disconnected lately.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.UpToDateApplicationUrl">
            <summary>
            The URL you got from the server if your client version is outdated. Get the new version from this location.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.ReceiveBufferSize">
            <summary>
            The size of the receive buffer, must be the same as on the server to avoid problems. Default: 16384 bytes.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.IgnorePings">
            <summary>
            Do you want to ignore incoming server pings? This will lead to timeout on server. Testing purposes only.
            </summary>
        </member>
        <member name="P:Stx.Net.BaseClient`1.Socket">
            <summary>
            The underlaying <see cref="T:System.Net.Sockets.Socket"/> of this client.
            </summary>
        </member>
        <member name="T:Stx.Net.BaseClient`1.ReceiveDelegate">
            <summary>
            Gets called when this client receives a packet from the server. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="p">The received packet.</param>
        </member>
        <member name="T:Stx.Net.BaseClient`1.ConnectedDelegate">
            <summary>
            Gets called when this client establishes a connection with the server. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="firstTime">Is this the first time this client connects to the server?</param>
        </member>
        <member name="T:Stx.Net.BaseClient`1.DisconnectedDelegate">
            <summary>
            Gets called when this client loses connection with the server.
            </summary>
        </member>
        <member name="T:Stx.Net.BaseClient`1.UpdateRequiredDelegate">
            <summary>
            Gets called when this client requires a software update. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="updateDownloadLocation">The location where you can download the update, specified by the server.</param>
        </member>
        <member name="T:Stx.Net.BaseClient`1.AnnouncementDelegate">
            <summary>
            Gets called when this client receives a server announcement (ex. "downtime in 20 minutes"). Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="message">The announced message.</param>
        </member>
        <member name="T:Stx.Net.BaseClient`1.CannotConnectDelegate">
            <summary>
            Gets called when this cannot connect to the server.
            </summary>
            <param name="ex">The internal exception why we couldn't connect.</param>
        </member>
        <member name="P:Stx.Net.BaseClient`1.PacketCompleter">
            <summary>
            Gets called when a request was send on the server, but the server did not receive the required data to process the request. 
            Use this delegate to complete the required data for the specified packet.
            <para>Invoke submit with true to send this packet back to the server, or submit false to mark this request as failed.</para>
            </summary>
            <param name="forPacket">The packet that stills requires data.</param>
            <param name="requiredKey">The required key the packet is missing.</param>
            <param name="requiredKeyType">The required type of the value that is associated with the key.</param>
            <param name="submit">The submit delegate used to send this packet back to the server after modifying the packet or mark it as failed.</param>
            <returns>True to send back to the server, false to mark this request as failed.</returns>
        </member>
        <member name="M:Stx.Net.BaseClient`1.#ctor(System.String,System.String,System.UInt16,System.String,System.String)">
            <summary>
            Create this object to establish a server connection.
            </summary>
            <param name="applicationKey">The key of the application this client is used for. Must be the same on the server.</param>
            <param name="connectAddress">The remote address of the server.</param>
            <param name="port">The port on the server.</param>
            <param name="authToken">Your unique authorization token, its is your password to your identity on the server, every ClientID has a authorisation token, the first time you connect is the only time you can choose it.</param>
            <param name="clientID">Your client ID. Acquire a new one using <see cref="M:System.Guid.NewGuid"/>.</param>
        </member>
        <member name="M:Stx.Net.BaseClient`1.Connect">
            <summary>
            Use this method to connect (or reconnect) synchronously or asynchronously (predefined, via <see cref="T:Stx.Net.ConnectionStartInfo"/>) to the server.
            </summary>
        </member>
        <member name="M:Stx.Net.BaseClient`1.ConnectSync">
            <summary>
            Use this method to synchronously connect (or reconnect) to the server.
            </summary>
        </member>
        <member name="M:Stx.Net.BaseClient`1.ConnectAsync">
            <summary>
            Use this method to asynchronously connect (or reconnect) to the server.
            </summary>
        </member>
        <member name="M:Stx.Net.BaseClient`1.RegisterNetworkTypes">
            <summary>
            This method registers all the default types that will be send over network, to include your own, override this method.
            <para>See <see cref="M:Stx.Serialization.Bytifier.Include``1"/>. Make sure you include all the types in the same order at the other side!</para>
            </summary>
        </member>
        <member name="M:Stx.Net.BaseClient`1.RegisterDataHandlers(Stx.Net.DataReceiver)">
            <summary>
            This method registers all the data-handlers associated with data keys in packets. To register your own <see cref="T:Stx.Net.DataHandler`1"/>, or override the default ones,
            override this method and use <see cref="M:Stx.Net.DataReceiver.AddHandler(Stx.Net.AnyDataHandler)"/> to add your own data handler.
            </summary>
            <param name="receiver">The data receiver to add data-handlers too.</param>
        </member>
        <member name="T:Stx.Net.RoomBased.ClientIdentity">
            <summary>
            This class provides a lot of information about clients and their matchmaking activities, you should know you can not modify a lot of items in this class because a lot is used server-side.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.ClientIdentity.Info">
            <summary>
            This field is modifiable, make sure you send it back to the server after modifying.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.ClientIdentity.RoomID">
            <summary>
            This field is read-only, modified only by the server.
            null if this client is currently not in a room.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.ClientIdentity.RoomStatus">
            <summary>
            The current status of this client in his/her current room.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.ClientIdentity.Name">
            <summary>
            Their actual name, no modifications were made.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.ClientIdentity.DisplayName">
            <summary>
            The name that is used to display their identity in UI, modified only if they have the default name.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.ClientIdentity.SecretDisplayName">
            <summary>
            The name that is used to display their identity in UI, with a max length of 16 letters, without showing who it actually is. (ex: Player589)
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.ClientIdentity.ShortDisplayName">
            <summary>
            The name that is used to display their identity in UI, with a max length of 16 letters.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.ClientIdentity.IsInAnyRoom">
            <summary>
            Checks if this client is in a room.
            </summary>
            <returns>The fact that the client is in a room.</returns>
        </member>
        <member name="M:Stx.Net.RoomBased.ClientIdentity.CameOffline">
            <summary>
            Server-size only.
            Adjusts this object's fields as it would be offline.
            </summary>
        </member>
        <member name="M:Stx.Net.RoomBased.ClientIdentity.CamePreLobby">
            <summary>
            Server-size only.
            Adjusts this object's fields as it would be in no room.
            </summary>
        </member>
        <member name="M:Stx.Net.RoomBased.ClientIdentity.IsInRoom(System.String)">
            <summary>
            Checks if this client is in the specified room.
            </summary>
            <param name="roomID">The id of the room to check.</param>
            <returns>The fact that it is in that room.</returns>
        </member>
        <member name="M:Stx.Net.RoomBased.ClientIdentity.IsInRoom(Stx.Net.RoomBased.Room)">
            <summary>
            Checks if this client is in the specified room.
            </summary>
            <param name="room">The room to check.</param>
            <returns>The fact that it is in that room.</returns>
        </member>
        <member name="M:Stx.Net.RoomBased.ClientIdentity.CameInRoom(Stx.Net.RoomBased.Room)">
            <summary>
            Server-size only.
            Adjusts this object's fields as it would be in a room.
            </summary>
        </member>
        <member name="M:Stx.Net.RoomBased.ClientIdentity.CameInRoom(System.String)">
            <summary>
            Server-size only.
            Adjusts this object's fields as it would be in a room.
            </summary>
        </member>
        <member name="M:Stx.Net.RoomBased.ClientIdentity.CameInGame">
            <summary>
            Server-size only.
            Adjusts this object's fields as it would be in-game.
            </summary>
        </member>
        <member name="M:Stx.Net.RoomBased.ClientIdentity.CameBackLobby">
            <summary>
            Server-size only.
            Adjusts this object's fields as it would be back in the lobby after being in a game.
            </summary>
        </member>
        <member name="F:Stx.Net.RoomBased.GameState.InLobby">
            <summary>
            Lobby.
            </summary>
        </member>
        <member name="F:Stx.Net.RoomBased.GameState.InGame">
            <summary>
            Playing the actual game.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.MatchmakingQueryResult.Ordered">
            <summary>
            Ordered by <see cref="T:Stx.Net.RoomBased.GameState"/> and player count.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.MatchmakingQueryResult.MostSuitableResult">
            <summary>
            The most suitable result from the query. Only unlocked, not full rooms are returned.
            Ordered by <see cref="T:Stx.Net.RoomBased.GameState"/> and player count.
            Returns null if no suitable room was found.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.MatchmakingQueryResult.MatchedRooms">
            <summary>
            The actual amount of rooms that matched the query on the server. Probably not equal to object count of <see cref="P:Stx.Net.RoomBased.MatchmakingQueryResult.Rooms"/> due to <see cref="P:Stx.Net.RoomBased.MatchmakingQuery.ResultsPerPage"/>.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.MatchmakingQueryResult.TotalRooms">
            <summary>
            The total amount of rooms found on the server.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.ID">
            <summary>
            The unique ID of this room.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.OwnerClientID">
            <summary>
            The ID of this room's owner.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.ConnectedClients">
            <summary>
            A list of client that are currently in this room.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.CreationTime">
            <summary>
            The date and time from when this room got hosted.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.Tags">
            <summary>
            A list of tags this room consists of, used to find specific uses for this room in matchmaking.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.Name">
            <summary>
            The display name of this room.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.MaxPlayers">
            <summary>
            The maximum amount of players this room can and should hold.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.Locked">
            <summary>
            Is this room locked with a password?
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.RoomCode">
            <summary>
            The code of this room, used to let others easily join to this room.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.RequiredPlayerCount">
            <summary>
            The amount of players that is required to start the game.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.TaggedClients">
            <summary>
            A key-value collection of clients and their tags in this room.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.State">
            <summary>
            The current state of the game in this room.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.IsFull">
            <summary>
            Is this room full?
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.PlayerCount">
            <summary>
            How many online players are already in this room?
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.EnoughPlayers">
            <summary>
            Are there enough players to start the game?
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.Room.OwnerDisplayName">
            <summary>
            The display name of the owner of this room.
            </summary>
        </member>
        <member name="M:Stx.Net.RoomBased.Room.Join(Stx.Net.RoomBased.Client,Stx.Net.ServerResponse{Stx.Net.RoomBased.Room},System.String)">
            <summary>
            Joins your client to this room.
            </summary>
            <param name="client">Your client object.</param>
            <param name="joined">The delegate that will get called after you joined the room</param>
            <param name="roomPassword">The password to unlock the room if the room is locked.</param>
        </member>
        <member name="M:Stx.Net.RoomBased.Room.Leave(Stx.Net.RoomBased.Client,Stx.Net.ServerResponse{Stx.Net.RoomBased.Room})">
            <summary>
            Leaves your client from this room.
            Same as <see cref="M:Stx.Net.RoomBased.Room.LeaveCurrent(Stx.Net.RoomBased.Client,Stx.Net.ServerResponse{Stx.Net.RoomBased.Room})"/>, leaves the current joined room.<br />
            This is to avoid dirty code with the <see cref="M:Stx.Net.RoomBased.Room.LeaveCurrent(Stx.Net.RoomBased.Client,Stx.Net.ServerResponse{Stx.Net.RoomBased.Room})"/> alternative.
            </summary>
            <param name="client">Your client object.</param>
            <param name="left">The delegate that will get called when done leaving.</param>
        </member>
        <member name="M:Stx.Net.RoomBased.Room.LeaveCurrent(Stx.Net.RoomBased.Client,Stx.Net.ServerResponse{Stx.Net.RoomBased.Room})">
            <summary>
            Same as <see cref="M:Stx.Net.RoomBased.Room.Leave(Stx.Net.RoomBased.Client,Stx.Net.ServerResponse{Stx.Net.RoomBased.Room})"/>, leaves the current joined room.
            This approach is static.
            </summary>
            <param name="client">Your client object.</param>
            <param name="left">The delegate that will get called when done leaving.</param>
        </member>
        <member name="M:Stx.Net.RoomBased.Room.Kick(Stx.Net.RoomBased.Client,Stx.Net.ServerResponse{Stx.Net.RoomBased.Room},System.String[])">
            <summary>
            Kick certain players from a room, only the owner of the room can do this.
            </summary>
            <param name="client">Your client object.</param>
            <param name="gotKicked">The delegate that will get called when done kicking.</param>
            <param name="clientsToKick">The clients(IDs) to kick, leave empty to kick everyone and destroy the room.</param>
        </member>
        <member name="M:Stx.Net.RoomBased.Room.BroadcastInRoom(Stx.Net.RoomBased.Client,System.Collections.Hashtable,Stx.Net.ServerResponse{System.String},System.String[])">
            <summary>
            Broadcasts data to clients in this room.
            </summary>
            <param name="client">Your client object.</param>
            <param name="data">The data to send.</param>
            <param name="broadcasted">The delegate that will get called when done broadcasting.</param>
            <param name="receivers"></param>
        </member>
        <member name="M:Stx.Net.RoomBased.Room.DestroyRoom(Stx.Net.RoomBased.Client,Stx.Net.ServerResponse{Stx.Net.RoomBased.Room})">
            <summary>
            Destroys the room and kicks all the players in it, only the owner of the room can do this.
            </summary>
            <param name="client">Your client object.</param>
            <param name="gotDestroyed">The delegate that will get called when done destroying.</param>
        </member>
        <member name="M:Stx.Net.RoomBased.RoomTemplate.#ctor(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a room template, used to create a room on the server.
            </summary>
            <param name="name">The name of the room.</param>
            <param name="maxPlayers">The maximum amount of players the room should hold.</param>
            <param name="password">The password used to lock this room, null if no password.</param>
            <param name="hidden">True if you want to hide the room from matchmaking queries.</param>
        </member>
        <member name="M:Stx.Net.RoomBased.RoomTemplate.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a room template with random name, used to create a room on the server.
            </summary>
            <param name="maxPlayers">The maximum amount of players the room should hold.</param>
            <param name="password">The password used to lock this room, null if no password.</param>
            <param name="hidden">True if you want to hide the room from matchmaking queries.</param>
        </member>
        <member name="T:Stx.Net.RoomBased.Client.AchievementGrantedDelegate">
            <summary>
            Gets called when this client has reached an achievement's goal. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="info">Information about the granted achievement.</param>
        </member>
        <member name="T:Stx.Net.RoomBased.Client.KickedFromRoomDelegate">
            <summary>
            Gets called when this client gets kicked from a room, either from leaving or getting kicked by someone. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
        </member>
        <member name="T:Stx.Net.RoomBased.Client.SomeoneJoinedRoomDelegate">
            <summary>
            Gets called when a client joins your room. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="joinedClient">The ID if the joined client.</param>
        </member>
        <member name="T:Stx.Net.RoomBased.Client.SomeoneLeftRoomDelegate">
            <summary>
            Gets called when a client leaves your room. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="leftClient">The ID if the client who left.</param>
        </member>
        <member name="T:Stx.Net.RoomBased.Client.GameStateChangedDelegate">
            <summary>
            Gets called when the game state of the current room changes. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="newGameState">The new game state.</param>
        </member>
        <member name="T:Stx.Net.RoomBased.Client.SomeoneChangedStatusDelegate">
            <summary>
            Gets called when someone in the room changes its room status. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="newStatus">The new status of the player.</param>
        </member>
        <member name="T:Stx.Net.RoomBased.Client.ChatDelegate">
            <summary>
            Gets called when you receive a chat. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="chatMessage">Information about the message being send.</param>
        </member>
        <member name="T:Stx.Net.RoomBased.Client.SomeonePromotedDelegate">
            <summary>
            Gets called when their is a new owner in your current room. Take a look at <see cref="T:Stx.Utilities.ThreadSafeData"/> to make this event thread-safe. 
            </summary>
            <param name="promotedClient">The client that was promoted to new room owner.</param>
        </member>
        <member name="M:Stx.Net.RoomBased.MatchmakingQuery.#ctor(Stx.Net.RoomBased.MatchmakingQuery,System.Int16)">
            <summary>
            Get the query for the next page of matched rooms.
            </summary>
            <param name="previousPage">The previous query, used to create the query for the next page.</param>
        </member>
        <member name="F:Stx.Net.RoomBased.MatchmakingQuery.MaxResults">
            <summary>
            The max amount of rooms a single matchmaking query request can return.
            This is to avoid slow serialization of room objects.
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.MatchmakingQuery.ResultsPerPage">
            <summary>
            The number of rooms to give per query result. Max per request is <see cref="F:Stx.Net.RoomBased.MatchmakingQuery.MaxResults"/>
            </summary>
        </member>
        <member name="P:Stx.Net.RoomBased.MatchmakingQuery.Page">
            <summary>
            If there were more room that matched the query than <see cref="P:Stx.Net.RoomBased.MatchmakingQuery.ResultsPerPage"/>, 
            use this number to offset to the next collection of matches.
            </summary>
        </member>
        <member name="F:Stx.Net.BytesContentType.AuthorizationScheme">
            <summary>
            Contains information about the client that is willing to connect to the server.
            Only send by the client to the server.
            </summary>
        </member>
        <member name="F:Stx.Net.BytesContentType.DisconnectReason">
            <summary>
            Contains the reason why the client will get disconnected in the first byte.
            Only send by the server to the client.
            </summary>
        </member>
        <member name="F:Stx.Net.BytesContentType.UpdateLocation">
            <summary>
            Contains the location of the updated application in ASCII format.
            Only send by the server to the client.
            </summary>
        </member>
        <member name="T:Stx.Net.ByteWrapper">
            <summary>
            A byte wrapper of format [0-1:Crc16] [2-3:Type] [4..:Data]
            </summary>
        </member>
        <member name="P:Stx.Net.ConnectionStartInfo.ConnectOnConstruct">
            <summary>
            When false, you have to call <see cref="M:Stx.Net.BaseClient`1.Connect"/> manually when you want to connect to the server.
            </summary>
        </member>
        <member name="T:Stx.Net.NetworkIdentity">
            <summary>
            This class provides information about a client.
            You should know you can not modify a lot of items in this class because a lot is used server-side.
            </summary>
        </member>
        <member name="P:Stx.Net.NetworkIdentity.Name">
            <summary>
            The raw name of this client. When setting outside of the server, make sure you send it back to the server.
            </summary>
        </member>
        <member name="P:Stx.Net.NetworkIdentity.Status">
            <summary>
            The current status of this client. This field is read-only, modified only by the server.
            </summary>
        </member>
        <member name="P:Stx.Net.NetworkIdentity.RegisteredDateTime">
            <summary>
            The exact date and time from when this client was registered. This field is read-only.
            </summary>
        </member>
        <member name="P:Stx.Net.NetworkIdentity.NetworkID">
            <summary>
            The unique identifier of this client, used to identify itself on the network. This field is read-only, modified only by the server.
            </summary>
        </member>
        <member name="P:Stx.Net.NetworkIdentity.IsOnline">
            <summary>
            Is this client online?
            </summary>
        </member>
        <member name="F:Stx.Net.NetworkIdentity.UnknownID">
            <summary>
            The unique identifier of a client that hasn't yet been acknowledged.
            </summary>
        </member>
        <member name="M:Stx.Net.NetworkIdentity.SetClientID(System.String)">
            <summary>
            Server-size only.
            Sets <see cref="P:Stx.Net.NetworkIdentity.NetworkID"/> of this <see cref="T:Stx.Net.NetworkIdentity"/> object. Only possible if the current <see cref="P:Stx.Net.NetworkIdentity.NetworkID"/> is equal to <see cref="F:Stx.Net.NetworkIdentity.UnknownID"/>.
            </summary>
            <param name="clientID"></param>
        </member>
        <member name="M:Stx.Net.NetworkIdentity.CameOnline">
            <summary>
            Server-size only.
            Adjusts this object's fields as it would be online.
            </summary>
        </member>
        <member name="M:Stx.Net.NetworkIdentity.CameOffline">
            <summary>
            Server-size only.
            Adjusts this object's fields as it would be offline.
            </summary>
        </member>
        <member name="M:Stx.Net.DataHandler`1.#ctor(System.String,Stx.Net.DataHandler{`0}.ReceivedDelegate)">
            <summary>
            Creates a new <see cref="T:Stx.Net.DataHandler`1"/> object with the required key to invoke the events.
            </summary>
            <param name="requiredKey">The <see cref="T:System.Collections.Hashtable"/> key to associate with the <see cref="E:Stx.Net.DataHandler`1.Received"/> event.</param>
            <param name="onReceive">The first delegate to be added to the <see cref="E:Stx.Net.DataHandler`1.Received"/> event. Can be null to not add it.</param>
        </member>
        <member name="M:Stx.Net.ObjectHandler.#ctor(System.String,Stx.Net.DataHandler{System.Object}.ReceivedDelegate)">
            <summary>
            Creates a new <see cref="T:Stx.Net.ObjectHandler"/> object with the required key to invoke the events.
            This data handler accepts all incoming objects.
            </summary>
            <param name="requiredKey">The <see cref="T:System.Collections.Hashtable"/> key to associate with the <paramref name="onReceive"/> delegate.</param>
            <param name="onReceive">The first delegate to be added to the <paramref name="onReceive"/> delegate. Can be null to not add it.</param>
        </member>
        <member name="M:Stx.Net.DataReceiver.AddHandler(Stx.Net.AnyDataHandler)">
            <summary>
            Adds a handler to this <see cref="T:Stx.Net.DataReceiver"/> object.
            </summary>
            <param name="handler">The handler to add, this should be either a <see cref="T:Stx.Net.DataHandler`1"/> or <see cref="T:Stx.Net.ObjectHandler"/> object.</param>
        </member>
        <member name="M:Stx.Net.DataReceiver.DidReceive(Stx.Net.IDataHolder)">
            <summary>
            Pass all the received data to this method to: call the associated events/enqueue them to call the events later. See <see cref="T:Stx.Utilities.ThreadSafeData"/>.
            </summary>
            <param name="p">The received data to handle.</param>
        </member>
        <member name="T:Stx.Net.Requests">
            <summary>
            Request item name identifiers.
            </summary>
        </member>
        <member name="F:Stx.Net.StxNet.DefaultReceiveBufferSize">
            <summary>
            The default size of the receive and send buffers per client.
            The default is 64 kilobytes per client.
            </summary>
        </member>
        <member name="M:Stx.Net.StxNet.RegisterNetworkTypes">
            <summary>
            This method registers all the default types that will be send over network, to include your own, override this method.
            See <see cref="M:Stx.Serialization.Bytifier.Include``1"/>. Make sure you include all the types in the same order at the other side!
            </summary>
        </member>
        <member name="P:Stx.Net.RequestPacket.RequestItemName">
            <summary>
            Gets the name of the item this packet requests.
            </summary>
        </member>
        <member name="P:Stx.Net.RequestPacket.RequestID">
            <summary>
            The ID of this request.
            </summary>
        </member>
        <member name="P:Stx.Net.RequestPacket.ResponseObject">
            <summary>
            The response to the request.
            </summary>
        </member>
        <member name="P:Stx.Net.RequestPacket.SendReceiveTime">
            <summary>
            The time it took for the packet to reach the server, get responded and come back.
            </summary>
        </member>
        <member name="P:Stx.Net.RequestPacket.ReceivedTime">
            <summary>
            The time when this packet was received.
            </summary>
        </member>
        <member name="P:Stx.Net.RequestPacket.ShouldRespond">
            <summary>
            Should we answer the packet and resend it?
            </summary>
        </member>
        <member name="P:Stx.Net.RequestPacket.Status">
            <summary>
            The status of the response.
            </summary>
        </member>
        <member name="P:Stx.Net.RequestPacket.LastSendReceiveTime">
            <summary>
            The time the last request packet took to reach the server, get responded and come back.
            </summary>
        </member>
        <member name="M:Stx.Net.RequestPacket.Respond(System.Object)">
            <summary>
            Respond to the request by sending the asked object, make sure you send this packet back.
            This request's status will be marked as <see cref="F:Stx.Net.PacketResponseStatus.Responded"/>.
            </summary>
            <param name="respondObject">The object to respond the request with.</param>
        </member>
        <member name="M:Stx.Net.RequestPacket.ResponseFail">
            <summary>
            Responds to the request with a <see cref="F:Stx.Net.PacketResponseStatus.Failed"/> status.
            </summary>
        </member>
        <member name="M:Stx.Net.RequestPacket.ResponseUnknown">
            <summary>
            Responds to the request with a <see cref="F:Stx.Net.PacketResponseStatus.UnknownRequest"/> status.
            </summary>
        </member>
        <member name="M:Stx.Net.RequestPacket.ResponseOk">
            <summary>
            Responds to the request with a <see cref="F:Stx.Net.PacketResponseStatus.Okey"/> status.
            </summary>
        </member>
        <member name="M:Stx.Net.RequestPacket.ResponseRequires``1(System.String)">
            <summary>
            Responds to the request with a <see cref="F:Stx.Net.PacketResponseStatus.RequiresCompletion"/> status.
            </summary>
            <typeparam name="T">The required type of the still required key.</typeparam>
            <param name="key">The still required key.</param>
        </member>
        <member name="M:Stx.Net.RequestPacket.DoNotRespond">
            <summary>
            Do not respond to this packet. Sets <see cref="P:Stx.Net.RequestPacket.ShouldRespond"/> to false.
            </summary>
        </member>
        <member name="M:Stx.Net.RequestPacket.DidRespond">
            <summary>
            Did this packet get responded?
            </summary>
            <returns>The fact that the packet was responded.</returns>
        </member>
        <member name="M:Stx.Net.RequestPacket.InvokeResponseMethods">
            <summary>
            Do not touch this method, you will cause problems!
            Used by client to invoke methods that are associated with their request.
            </summary>
        </member>
        <member name="M:Stx.Net.RequestPacket.RequestPacketStatus``1(System.Object,Stx.Net.ServerResponse{``0})">
            <summary>
            Convert raw answer to a <see cref="T:Stx.Net.ServerResponse`1"/> delegate that contains more information.
            </summary>
            <typeparam name="T">The item to cast to if the packet's status is <see cref="F:Stx.Net.PacketResponseStatus.Responded"/></typeparam>
            <param name="receivedResponse"></param>
            <param name="delegateToInvoke"></param>
        </member>
    </members>
</doc>
