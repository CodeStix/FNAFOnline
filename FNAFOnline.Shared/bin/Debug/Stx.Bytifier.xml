<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stx.Bytifier</name>
    </assembly>
    <members>
        <member name="M:Stx.Utilities.ByteUtil.ToSegmentStack(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a stack of one-dimensional byte arrays. Opposite of <see cref="M:Stx.Utilities.ByteUtil.FromSegmentStack(System.Collections.Generic.Stack{System.Byte[]})"/>.
            </summary>
            <param name="buffer">The compatible byte array (created with <see cref="M:Stx.Utilities.ByteUtil.FromSegmentStack(System.Collections.Generic.Stack{System.Byte[]})"/>) to convert back to a byte array stack.</param>
            <returns>The stack you just converted.</returns>
        </member>
        <member name="M:Stx.Utilities.ByteUtil.ToSegmentStack(System.Byte[])">
            <summary>
            Creates a stack of one-dimensional byte arrays. Opposite of <see cref="M:Stx.Utilities.ByteUtil.FromSegmentStack(System.Collections.Generic.Stack{System.Byte[]})"/>.
            </summary>
            <param name="buffer">The compatible byte array (created with <see cref="M:Stx.Utilities.ByteUtil.FromSegmentStack(System.Collections.Generic.Stack{System.Byte[]})"/>) to convert back to a byte array stack.</param>
            <returns>The stack you just converted.</returns>
        </member>
        <member name="M:Stx.Utilities.ByteUtil.FromSegmentStack(System.Collections.Generic.Stack{System.Byte[]})">
            <summary>
            Create a one-dimensional byte array from a <see cref="T:System.Collections.Generic.Stack`1"/> of bytes. Opposite is <see cref="M:Stx.Utilities.ByteUtil.ToSegmentStack(System.Byte[])"/>.
            <para>The size of byte arrays inside the stack may vary. The stack doesn't have a fixed size.</para>
            <para>This is handy if you want to store multiple sets of data in the same byte array without complicated calculations.</para>
            </summary>
            <param name="stack">The stack of byte arrays to convert.</param>
            <returns>A one-dimensional byte array containing all the stacks data. Convert it back with <see cref="M:Stx.Utilities.ByteUtil.ToSegmentStack(System.Byte[])"/>.</returns>
        </member>
        <member name="M:Stx.Utilities.ByteUtil.UnwrapSegmentedBytes(System.Byte[])">
            <summary>
            Used to prevent combined buffers in a byte stream (for example <see cref="T:System.Net.Sockets.Socket"/>).
            </summary>
            <param name="buffer">The whole buffer to unwrap if needed.</param>
            <returns>One or multiple buffers to interpret.</returns>
        </member>
        <member name="M:Stx.Utilities.ByteUtil.WrapSegmentedBytes(System.Byte[])">
            <summary>
            Wrap a buffer so it is compatible with <see cref="M:Stx.Utilities.ByteUtil.UnwrapSegmentedBytes(System.Byte[])"/>.
            </summary>
            <param name="buffer">The buffer to wrap.</param>
            <returns>The modified buffer.</returns>
        </member>
        <member name="T:Stx.Serialization.Bytifier">
            <summary>
            Fast object serializing method used to send objects over network. Does not support version control.
            </summary>
        </member>
        <member name="M:Stx.Serialization.Bytifier.IncludeManually(System.Type,System.Byte)">
            <summary>
            Includes a type with code <paramref name="typeCode"/>, make sure they are the same when serializing and/or deserializing.
            </summary>
            <param name="type">The type to include.</param>
            <param name="typeCode">Type code to bind to that type. Must be unique for each included type and must be between 21 and 255.</param>
        </member>
        <member name="M:Stx.Serialization.Bytifier.Include``1">
            <summary>
            Includes a type in the serialization process. 
            <para>!! Make sure you use the same include order in the deserialization process.</para>
            </summary>
            <typeparam name="T">The type to include in the serialization process.</typeparam>
            <returns>The type code of the included type, automatically determined.</returns>
        </member>
        <member name="T:Stx.Serialization.IByteDefined">
            <summary>
            Attach this interface to every object you want to serialize using <see cref="T:Stx.Serialization.Bytifier"/>.
            <para>You don't have to implement anything, just make sure there is a parameterless constructor.</para>
            <para>Make sure you include it via <see cref="M:Stx.Serialization.Bytifier.Include``1"/>.</para>
            </summary>
        </member>
        <member name="T:Stx.Serialization.IByteDefined`1">
            <summary>
            Attach this interface to every object you want to serialize using <see cref="T:Stx.Serialization.Bytifier"/>.
            <para>You don't have to implement anything, just make sure there is a parameterless constructor.</para>
            <para>Make sure you include it via <see cref="M:Stx.Serialization.Bytifier.Include``1"/>.</para>
            </summary>
        </member>
        <member name="T:Stx.Serialization.IBytifiable">
            <summary>
            Attach this interface to a object you want to manually convert to bytes, this enhances speed and size.
            <para>Make sure you include it via <see cref="M:Stx.Serialization.Bytifier.Include``1"/> and that a parameterless constructor exists!</para>
            You should take a look at <see cref="T:Stx.Utilities.ByteUtil"/>. 
            </summary>
        </member>
        <member name="T:Stx.Serialization.IBytifiable`1">
            <summary>
            Attach this interface to a object you want to manually convert to bytes, this enhances speed and size.
            <para>Make sure you include it via <see cref="M:Stx.Serialization.Bytifier.Include``1"/> and that a parameterless constructor exists!</para>
            You should take a look at <see cref="T:Stx.Utilities.ByteUtil"/>. 
            </summary>
        </member>
    </members>
</doc>
