<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stx.Net.ServerOnly</name>
    </assembly>
    <members>
        <member name="P:Stx.Net.ServerOnly.RoomBased.RoomApplication.ServerRoom">
            <summary>
            The room on the server this application is bound too.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.RoomApplication.Room">
            <summary>
            The room this application is bound too. Same as <see cref="P:Stx.Net.ServerOnly.RoomBased.ServerRoom.Underlaying"/>.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.RoomApplication.Server">
            <summary>
            The internal server this room application is running on. Same as <see cref="P:Stx.Net.ServerOnly.RoomBased.ServerRoom.Server"/>.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.RoomApplication.State">
            <summary>
            Gets the current state of this room. Same as <see cref="P:Stx.Net.RoomBased.Room.State"/>.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.RoomApplication.Default">
            <summary>
            The default room application that basically does nothing but exist.
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.RoomApplication.OnInitialize">
            <summary>
            Gets called when the room is ready to use this application.
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.RoomApplication.OnCanStart">
            <summary>
            Gets called when this room is ready to change its state to <see cref="F:Stx.Net.RoomBased.GameState.InGame"/>.
            <para>Change the game state from here. Use <see cref="M:Stx.Net.ServerOnly.RoomBased.ServerRoom.TryChangeGameState(Stx.Net.RoomBased.GameState)"/></para>
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.RoomApplication.OnStart">
            <summary>
            Gets called when this room's game state changes to <see cref="F:Stx.Net.RoomBased.GameState.InGame"/> .
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.RoomApplication.OnEnd">
            <summary>
            Gets called when this room's game state changes to <see cref="F:Stx.Net.RoomBased.GameState.InLobby"/> .
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.RoomApplication.OnTerminate">
            <summary>
            Gets called when this room will get destroyed.
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.RoomApplication.OnPromoted(System.String)">
            <summary>
            Gets called when a player was promoted to the room owner.
            </summary>
            <param name="newOwnerID">The player that got promoted.</param>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.ServerRoom.Underlaying">
            <summary>
            The actual underlaying room.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.ServerRoom.HashedRoomPassword">
            <summary>
            The hashed password of this room.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.ServerRoom.Hidden">
            <summary>
            Is this room hidden for matchmaking requests?
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.ServerRoom.Application">
            <summary>
            Gets/sets the bound application object from this room.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.ServerRoom.ID">
            <summary>
            The ID of the underlaying room.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.RoomBased.ServerRoom.ShouldBeDisposed">
            <summary>
            Should this room get destroyed? 
            Criteria for this to return true:
            <para>The lifespan of this room is longer than 2 days, or the amount of players is 0 and the total lifespan is longer than 20 seconds.</para>
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.ServerMatchmaking.GetMatches(Stx.Net.RoomBased.MatchmakingQuery,System.Boolean)">
            <summary>
            Performs a query on all the rooms on the server and returns matching rooms.
            </summary>
            <param name="query">The query all returned rooms should match.</param>
            <param name="forceReturnAllMatches">True if you want to return all the results that match the query and skip the <see cref="P:Stx.Net.RoomBased.MatchmakingQuery.Page"/> and <see cref="P:Stx.Net.RoomBased.MatchmakingQuery.ResultsPerPage"/> parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.Server.InvokeRequestHandlers(Stx.Net.RequestPacket,Stx.Net.ServerOnly.BaseClientData{Stx.Net.RoomBased.ClientIdentity})">
            <summary>
            Invokes handlers for specific requests on this server.
            </summary>
            <param name="request">The request packet that needs a handler.</param>
            <param name="sender">The sender of this packet.</param>
            <returns>The fact that it found and invoked a handler.</returns>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.Server.CreateRoomRequestHandler(System.String,System.String,Stx.Net.ServerOnly.RequestDelegate{Stx.Net.RoomBased.ClientIdentity})">
            <summary>
            Creates a request handler that is only valid for the clients in a specific room.
            </summary>
            <param name="roomID">The ID of the room to create a handler for.</param>
            <param name="requiredKey">The required request packet key.</param>
            <param name="handler">The actual handler for the specified key.</param>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.Server.RemoveRoomRequestHandler(System.String,System.String)">
            <summary>
            Removes a room-specific request handler.
            </summary>
            <param name="roomID">The ID of the room to remove a handler from.</param>
            <param name="key">The key of the handler to remove.</param>
        </member>
        <member name="M:Stx.Net.ServerOnly.RoomBased.Server.RemoveAllRoomRequestHandlers(System.String)">
            <summary>
            Removes all the room-specific requests for a specified room.
            </summary>
            <param name="roomID">The ID of the room to remove all request handlers from.</param>
        </member>
        <member name="T:Stx.Net.ServerOnly.BaseClientData`1">
            <summary>
            The base class for storing information about a client's connection to the server.
            </summary>
            <typeparam name="TIdentity">The type to use to store data about the client in. Type must inherit <see cref="T:Stx.Net.NetworkIdentity"/>.</typeparam>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseClientData`1.NetworkID">
            <summary>
            The unique identifier of this client, used to identify itself on the network.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseClientData`1.Name">
            <summary>
            The actual name of this client.
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.BaseClientData`1.Load(System.String)">
            <summary>
            Loads this clients identity (<see cref="P:Stx.Net.ServerOnly.BaseClientData`1.Identity"/>) from disk using <see cref="T:Stx.Net.ClientRegisterer`1"/>. 
            <param name="asClientID">The id of the identity to load into this client data object.</param>
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.BaseClientData`1.Save">
            <summary>
            Saves this clients identity (<see cref="P:Stx.Net.ServerOnly.BaseClientData`1.Identity"/>) to disk using <see cref="T:Stx.Net.ClientRegisterer`1"/>. 
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.ConnectedCount">
            <summary>
            How many clients are connected to this server?
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.CanConnect">
            <summary>
            Are clients allowed to connect?
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.SendToken">
            <summary>
            A value that gets refreshed every second. Each client can at most send a specified packets(<see cref="P:Stx.Net.ServerOnly.BaseServer`1.MaxReceivesPerSecondPerClient"/>) per token.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.ApplicationKey">
            <summary>
            The key of the application this server is used for.
            The client must use a copy of this key to connect to the server!
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.ApplicationName">
            <summary>
            The name of the application this server is used for.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.ApplicationVersion">
            <summary>
            The version of the application this server is used for.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.UpToDateApplicationUrl">
            <summary>
            The update URL to send to an outdated client.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.MaxConnections">
            <summary>
            The maximum player count that can connect to the server at once.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.PingIntervalSeconds">
            <summary>
            The interval to send ping packets to all the clients.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.MaxTimeoutSeconds">
            <summary>
            The time before disconnecting a client when it does not reply on a ping packet.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.NetworkID">
            <summary>
            The ID of the server on the network.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.MaxReceivesPerSecondPerClient">
            <summary>
            The maximum amount of packets each client can send per second.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.SendReceiveBufferSizePerClient">
            <summary>
            The size (in bytes) of the receive/send buffer per client, increase when you are 
            sending huge packets or sending a lot of packets in a small amount of time (can flow into the same receive buffer).
            You should not touch this if you do not know what you are doing.
            </summary>
        </member>
        <member name="P:Stx.Net.ServerOnly.BaseServer`1.IsRunning">
            <summary>
            The fact that this server is running.
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.BaseServer`1.RegisterNetworkTypes">
            <summary>
            This method registers all the types that will be send over network, to include your own, override this method.
            See <see cref="M:Stx.Serialization.Bytifier.Include``1"/>. Make sure you include all the types in the same order at the client side!
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.BaseServer`1.InvokeRequestHandlers(Stx.Net.RequestPacket,Stx.Net.ServerOnly.BaseClientData{`0})">
            <summary>
            Invokes handlers for specific requests on this server.
            </summary>
            <param name="request">The request packet that needs a handler.</param>
            <param name="sender">The sender of this packet.</param>
            <returns>The fact that it found and invoked a handler.</returns>
        </member>
        <member name="F:Stx.Net.ServerOnly.SecurePasswordHasher.SaltSize">
            <summary>
            Size of salt.
            </summary>
        </member>
        <member name="F:Stx.Net.ServerOnly.SecurePasswordHasher.HashSize">
            <summary>
            Size of hash.
            </summary>
        </member>
        <member name="M:Stx.Net.ServerOnly.SecurePasswordHasher.Hash(System.String,System.Int32)">
            <summary>
            Creates a hash from a password.
            </summary>
            <param name="password">The password.</param>
            <param name="iterations">Number of iterations.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Stx.Net.ServerOnly.SecurePasswordHasher.Hash(System.String)">
            <summary>
            Creates a hash from a password with 10000 iterations
            </summary>
            <param name="password">The password.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Stx.Net.ServerOnly.SecurePasswordHasher.IsHashSupported(System.String)">
            <summary>
            Checks if hash is supported.
            </summary>
            <param name="hashString">The hash.</param>
            <returns>Is supported?</returns>
        </member>
        <member name="M:Stx.Net.ServerOnly.SecurePasswordHasher.Verify(System.String,System.String)">
            <summary>
            Verifies a password against a hash.
            </summary>
            <param name="password">The password.</param>
            <param name="hashedPassword">The hash.</param>
            <returns>Could be verified?</returns>
        </member>
    </members>
</doc>
