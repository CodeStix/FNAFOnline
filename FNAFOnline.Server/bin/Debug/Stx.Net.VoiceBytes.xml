<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stx.Net.VoiceBytes</name>
    </assembly>
    <members>
        <member name="T:G711.ALawDecoder">
            <summary>
            Turns 8-bit A-law bytes back into 16-bit PCM values.
            </summary>
        </member>
        <member name="F:G711.ALawDecoder.aLawToPcmMap">
            <summary>
            An array where the index is the a-law input, and the value is
            the 16-bit PCM result.
            </summary>
        </member>
        <member name="M:G711.ALawDecoder.Decode(System.Byte)">
            <summary>
            Decode one a-law byte. For internal use only.
            </summary>
            <param name="alaw">The encoded a-law byte</param>
            <returns>A short containing the 16-bit result</returns>
        </member>
        <member name="M:G711.ALawDecoder.ALawDecode(System.Byte)">
            <summary>
            Decode one a-law byte
            </summary>
            <param name="alaw">The encoded a-law byte</param>
            <returns>A short containing the 16-bit result</returns>
        </member>
        <member name="M:G711.ALawDecoder.ALawDecode(System.Byte[])">
            <summary>
            Decode an array of a-law encoded bytes
            </summary>
            <param name="data">An array of a-law encoded bytes</param>
            <returns>An array of shorts containing the results</returns>
        </member>
        <member name="M:G711.ALawDecoder.ALawDecode(System.Byte[],System.Int16[]@)">
            <summary>
            Decode an array of a-law encoded bytes
            </summary>
            <param name="data">An array of a-law encoded bytes</param>
            <param name="decoded">An array of shorts containing the results</param>
            <remarks>Same as the other method that returns an array of shorts</remarks>
        </member>
        <member name="M:G711.ALawDecoder.ALawDecode(System.Byte[],System.Byte[]@)">
            <summary>
            Decode an array of a-law encoded bytes
            </summary>
            <param name="data">An array of a-law encoded bytes</param>
            <param name="decoded">An array of bytes in Little-Endian format containing the results</param>
        </member>
        <member name="T:G711.ALawEncoder">
            <summary>
            Turns 16-bit linear PCM values into 8-bit A-law bytes.
            </summary>
        </member>
        <member name="F:G711.ALawEncoder.pcmToALawMap">
            <summary>
            An array where the index is the 16-bit PCM input, and the value is
            the a-law result.
            </summary>
        </member>
        <member name="M:G711.ALawEncoder.Encode(System.Int32)">
            <summary>
            Encode one a-law byte from a 16-bit signed integer. Internal use only.
            </summary>
            <param name="pcm">A 16-bit signed pcm value</param>
            <returns>A a-law encoded byte</returns>
        </member>
        <member name="M:G711.ALawEncoder.ALawEncode(System.Int32)">
            <summary>
            Encode a pcm value into a a-law byte
            </summary>
            <param name="pcm">A 16-bit pcm value</param>
            <returns>A a-law encoded byte</returns>
        </member>
        <member name="M:G711.ALawEncoder.ALawEncode(System.Int16)">
            <summary>
            Encode a pcm value into a a-law byte
            </summary>
            <param name="pcm">A 16-bit pcm value</param>
            <returns>A a-law encoded byte</returns>
        </member>
        <member name="M:G711.ALawEncoder.ALawEncode(System.Int32[])">
            <summary>
            Encode an array of pcm values
            </summary>
            <param name="data">An array of 16-bit pcm values</param>
            <returns>An array of a-law bytes containing the results</returns>
        </member>
        <member name="M:G711.ALawEncoder.ALawEncode(System.Int16[])">
            <summary>
            Encode an array of pcm values
            </summary>
            <param name="data">An array of 16-bit pcm values</param>
            <returns>An array of a-law bytes containing the results</returns>
        </member>
        <member name="M:G711.ALawEncoder.ALawEncode(System.Byte[])">
            <summary>
            Encode an array of pcm values
            </summary>
            <param name="data">An array of bytes in Little-Endian format</param>
            <returns>An array of a-law bytes containing the results</returns>
        </member>
        <member name="M:G711.ALawEncoder.ALawEncode(System.Byte[],System.Byte[])">
            <summary>
            Encode an array of pcm values into a pre-allocated target array
            </summary>
            <param name="data">An array of bytes in Little-Endian format</param>
            <param name="target">A pre-allocated array to receive the A-law bytes.  This array must be at least half the size of the source.</param>
        </member>
        <member name="T:G711.MuLawDecoder">
            <summary>
            Turns 8-bit µ-law bytes back into 16-bit PCM values.
            </summary>
        </member>
        <member name="F:G711.MuLawDecoder.muLawToPcmMap">
            <summary>
            An array where the index is the mu-law input, and the value is
            the 16-bit PCM result.
            </summary>
        </member>
        <member name="M:G711.MuLawDecoder.Decode(System.Byte)">
            <summary>
            Decode one mu-law byte. For internal use only.
            </summary>
            <param name="mulaw">The encoded mu-law byte</param>
            <returns>A short containing the 16-bit result</returns>
        </member>
        <member name="M:G711.MuLawDecoder.MuLawDecode(System.Byte)">
            <summary>
            Decode one mu-law byte
            </summary>
            <param name="mulaw">The encoded mu-law byte</param>
            <returns>A short containing the 16-bit result</returns>
        </member>
        <member name="M:G711.MuLawDecoder.MuLawDecode(System.Byte[])">
            <summary>
            Decode an array of mu-law encoded bytes
            </summary>
            <param name="data">An array of mu-law encoded bytes</param>
            <returns>An array of shorts containing the results</returns>
        </member>
        <member name="M:G711.MuLawDecoder.MuLawDecode(System.Byte[],System.Int16[]@)">
            <summary>
            Decode an array of mu-law encoded bytes
            </summary>
            <param name="data">An array of mu-law encoded bytes</param>
            <param name="decoded">An array of shorts containing the results</param>
            <remarks>Same as the other method that returns an array of shorts</remarks>
        </member>
        <member name="M:G711.MuLawDecoder.MuLawDecode(System.Byte[],System.Byte[]@)">
            <summary>
            Decode an array of mu-law encoded bytes
            </summary>
            <param name="data">An array of mu-law encoded bytes</param>
            <param name="decoded">An array of bytes in Little-Endian format containing the results</param>
        </member>
        <member name="T:G711.MuLawEncoder">
            <summary>
            Turns 16-bit linear PCM values into 8-bit µ-law bytes.
            </summary>
        </member>
        <member name="P:G711.MuLawEncoder.ZeroTrap">
            <summary>
            Sets whether or not all-zero bytes are encoded as 2 instead.
            The pcm values this concerns are in the range [32768,33924] (unsigned).
            </summary>
        </member>
        <member name="F:G711.MuLawEncoder.pcmToMuLawMap">
            <summary>
            An array where the index is the 16-bit PCM input, and the value is
            the mu-law result.
            </summary>
        </member>
        <member name="M:G711.MuLawEncoder.Encode(System.Int32)">
            <summary>
            Encode one mu-law byte from a 16-bit signed integer. Internal use only.
            </summary>
            <param name="pcm">A 16-bit signed pcm value</param>
            <returns>A mu-law encoded byte</returns>
        </member>
        <member name="M:G711.MuLawEncoder.MuLawEncode(System.Int32)">
            <summary>
            Encode a pcm value into a mu-law byte
            </summary>
            <param name="pcm">A 16-bit pcm value</param>
            <returns>A mu-law encoded byte</returns>
        </member>
        <member name="M:G711.MuLawEncoder.MuLawEncode(System.Int16)">
            <summary>
            Encode a pcm value into a mu-law byte
            </summary>
            <param name="pcm">A 16-bit pcm value</param>
            <returns>A mu-law encoded byte</returns>
        </member>
        <member name="M:G711.MuLawEncoder.MuLawEncode(System.Int32[])">
            <summary>
            Encode an array of pcm values
            </summary>
            <param name="data">An array of 16-bit pcm values</param>
            <returns>An array of mu-law bytes containing the results</returns>
        </member>
        <member name="M:G711.MuLawEncoder.MuLawEncode(System.Int16[])">
            <summary>
            Encode an array of pcm values
            </summary>
            <param name="data">An array of 16-bit pcm values</param>
            <returns>An array of mu-law bytes containing the results</returns>
        </member>
        <member name="M:G711.MuLawEncoder.MuLawEncode(System.Byte[])">
            <summary>
            Encode an array of pcm values
            </summary>
            <param name="data">An array of bytes in Little-Endian format</param>
            <returns>An array of mu-law bytes containing the results</returns>
        </member>
        <member name="M:G711.MuLawEncoder.MuLawEncode(System.Byte[],System.Byte[])">
            <summary>
            Encode an array of pcm values into a pre-allocated target array
            </summary>
            <param name="data">An array of bytes in Little-Endian format</param>
            <param name="target">A pre-allocated array to receive the mu-law bytes.  This array must be at least half the size of the source.</param>
        </member>
    </members>
</doc>
